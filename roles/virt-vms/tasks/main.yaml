- name: check to installed libvirt daemon
  yum:
    name: "{{ packages }}"
  register: install_status
  vars:
    packages:
    - libvirt
    - libvirt-daemon-kvm
    - libvirt-client

- name: install libvirt daemon, python-libvirt and httpd packages
  yum:
    name: ['libvirt-daemon-*','httpd','python2-lxml','python3-lxml']
    state: latest
  when: install_status.rc == 0

- name: allow http service to firewalld service
  firewalld:
    service: http
    permanent: yes
    immediate: yes
    state: enabled
    zone: "{{ item }}"
  with_items:
    - libvirt
    - public


- name: start libvirt daemon
  service:
    name: libvirtd
    state: started
    enabled: yes

- name: start httpd service
  service:
    name: httpd
    state: started
    enabled: yes

- name: get list of VMs from libvirtd
  virt:
    command: list_vms
  register: virt_vms

- name: copy a anaconda files to /var/www/html
  copy:
    src: "{{ item }}.ks"
    dest: "{{ local_apache_htdoc_directory }}{{ item }}.ks"
    owner: root
    group: root
    mode: 0644
  with_items:
    - "{{ control_nodes }}"
    - "{{ network_nodes }}"
    - "{{ compute_nodes }}"
    - "{{ storage_nodes }}"

- name: adjust to kickstart .ks file permission 
  file:
    path: "{{ local_apache_htdoc_directory }}{{ item }}.ks"
    owner: root
    group: root
    mode: 0644
  with_items:
    - "{{ control_nodes }}"
    - "{{ network_nodes }}"
    - "{{ compute_nodes }}"
    - "{{ storage_nodes }}"

- name: create a OpenStack VMs for LAB virtual disk
  command: qemu-img create -f {{ virt_disk_format }} {{ virt_disk_image_path }}{{ item }}.{{ virt_disk_format }} {{ virt_disk_size }}
  with_items:
    - "{{ control_nodes }}"
    - "{{ compute_nodes }}"
    - "{{ storage_nodes }}"
    - "{{ network_nodes }}"   

- name: check to internal network device
  shell: "virsh net-list | grep internal | awk '{ print $1 }'"
  register: verify_internal

- debug: 
    msg: "{{ verify_internal }}"

- name: create a internal virtual network
  virt_net:
    command: define
    name: internal
    xml: "{{ lookup('template', 'internal.xml.j2') }}"
    autostart: yes
  when: verify_internal.rc == 0

- name: create vdb disk for compute
  command: qemu-img create -f {{ virt_disk_format }} {{ virt_disk_image_path }}{{ item }}-{{ virt_vdb_postfix }}.{{ virt_disk_format }} {{ virt_disk_size }}
  with_items:
    - "{{ compute_nodes }}"

- name: create secondary disk XML file and defined to the VMs.
  template:
    src: 'vdb.xml.j2'
    dest: "{{ virt_disk_image_path }}{{ virt_vdb_postfix }}.xml"
    owner: "{{ libvirt_owner }}"
    group: "{{ libvirt_group }}"
    mode: 0644
  when: enable_vdb_disk is defined

- name: starting to internal virtual network
  virt_net:
    command: start
    name: internal
    autostart: yes
  ignore_errors: true

- name: change ownership to the virtual disk images
  file:
    path: "{{ virt_disk_image_path }}{{ item }}.{{ virt_disk_format }}"
    owner: qemu
    group: qemu
    mode: 0644
  with_items:
    - "{{ control_nodes }}"
    - "{{ network_nodes }}"
    - "{{ compute_nodes }}"
    - "{{ storage_nodes }}"

- name: install virtual machine on libvirt daemon 
  shell: virt-install -n {{ item }} -r {{ vmem }} --cpu host-passthrough --vcpus {{ vcpu }} -l {{ repository_url }} --network network={{ nic1 }} --network network={{ nic2 }} --graphics {{ virt_graphics }} -v --disk=path={{ virt_disk_image_path }}{{ item }}.{{ virt_disk_format }},format={{ virt_disk_format }} --noautoconsole -x ks="{{ kickstart_address }}/{{ item }}.ks"
  with_items:
    - "{{ control_nodes }}"
    - "{{ network_nodes }}"
    - "{{ storage_nodes }}"

- name: install compute virtual machine on libvirt daemon 
  shell: virt-install -n {{ item }} -r {{ vmem_compute }} --cpu host-passthrough --vcpus {{ vcpu }} -l {{ repository_url }} --network network={{ nic1 }} --network network={{ nic2 }} --graphics {{ virt_graphics }} -v --disk=path={{ virt_disk_image_path }}{{ item }}.{{ virt_disk_format }},format={{ virt_disk_format }} --noautoconsole -x ks="{{ kickstart_address }}/{{ item }}.ks"
  with_items:
    - "{{ compute_nodes }}"

- name: wait for build of VMs
  pause:
    minutes: 10
    prompt: "Waiting for building to VMs about 10 mins"

- name: starting to control/compute/storage VMs
  virt:
    name: "{{ item }}"
    command: start 
  with_items:
    - "{{ control_nodes }}"
    - "{{ network_nodes }}"
    - "{{ storage_nodes }}"
    - "{{ compute_nodes }}"

- name: wait for boot up all of VMs in 30 second
  pause:
    seconds: 30

- name: stop to compute VMs for attach to vdb disk
  virt:
    name: "{{ item }}"
    command: destroy 
  with_items:
    - "{{ compute_nodes }}"

- name: wait for boot up all of VMs in 30 second
  pause:
    seconds: 30

- name: start to compute VMs again
  virt:
    name: "{{ item }}"
    command: start 
  with_items:
    - "{{ compute_nodes }}"

- name: wait for boot up all of VMs in 30 second
  pause:
    seconds: 30
